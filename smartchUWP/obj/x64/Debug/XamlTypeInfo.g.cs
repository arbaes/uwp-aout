//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace smartchUWP
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace smartchUWP.smartchUWP_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[72];
            _typeNameTable[0] = "smartchUWP.Converters.DateTimeConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "smartchUWP.Converters.DateTimeToAgeConverter";
            _typeNameTable[3] = "smartchUWP.Converters.DateTimeToDateTimeOffsetConverter";
            _typeNameTable[4] = "smartchUWP.Converters.BooleanToVisibilityConverter";
            _typeNameTable[5] = "smartchUWP.Converters.BooleanToIsVisibleBorderThikness";
            _typeNameTable[6] = "smartchUWP.Converters.StateToStringConverter";
            _typeNameTable[7] = "smartchUWP.ViewModel.ViewModelLocator";
            _typeNameTable[8] = "smartchUWP.ViewModel.MainPageViewModel";
            _typeNameTable[9] = "smartchUWP.ViewModel.SmartchViewModelBase";
            _typeNameTable[10] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[11] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[12] = "smartchUWP.ViewModel.ClubsViewModel";
            _typeNameTable[13] = "smartchUWP.ViewModel.AddMembreViewModel";
            _typeNameTable[14] = "smartchUWP.ViewModel.MembresModelView";
            _typeNameTable[15] = "smartchUWP.ViewModel.TournamentViewModel";
            _typeNameTable[16] = "smartchUWP.ViewModel.AddTournamentViewModel";
            _typeNameTable[17] = "smartchUWP.ViewModel.AddClubViewModel";
            _typeNameTable[18] = "smartchUWP.ViewModel.LoginViewModel";
            _typeNameTable[19] = "smartchUWP.ViewModel.AddMatchViewModel";
            _typeNameTable[20] = "smartchUWP.ViewModel.MatchsViewModel";
            _typeNameTable[21] = "smartchUWP.ViewModel.RegisterViewModel";
            _typeNameTable[22] = "smartchUWP.View.AdresseForm";
            _typeNameTable[23] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[25] = "smartchUWP.View.Clubs.AddClub";
            _typeNameTable[26] = "smartchUWP.View.Clubs.Clubs";
            _typeNameTable[27] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[28] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[29] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[30] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[31] = "XamlAnimatedGif.AnimationBehavior";
            _typeNameTable[32] = "System.Uri";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.Image";
            _typeNameTable[34] = "System.IO.Stream";
            _typeNameTable[35] = "System.MarshalByRefObject";
            _typeNameTable[36] = "Windows.UI.Xaml.Media.Animation.RepeatBehavior";
            _typeNameTable[37] = "Boolean";
            _typeNameTable[38] = "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade";
            _typeNameTable[39] = "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>";
            _typeNameTable[40] = "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase`1<Windows.UI.Xaml.UIElement>";
            _typeNameTable[41] = "Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.UIElement>";
            _typeNameTable[42] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[43] = "Double";
            _typeNameTable[44] = "Microsoft.Toolkit.Uwp.UI.Animations.EasingType";
            _typeNameTable[45] = "System.Enum";
            _typeNameTable[46] = "System.ValueType";
            _typeNameTable[47] = "Windows.UI.Xaml.Media.Animation.EasingMode";
            _typeNameTable[48] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[49] = "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior";
            _typeNameTable[50] = "Microsoft.Xaml.Interactivity.Trigger";
            _typeNameTable[51] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[52] = "Microsoft.Xaml.Interactions.Core.ComparisonConditionType";
            _typeNameTable[53] = "Microsoft.Xaml.Interactions.Core.CallMethodAction";
            _typeNameTable[54] = "String";
            _typeNameTable[55] = "smartchUWP.View.Login";
            _typeNameTable[56] = "smartchUWP.View.MemberSelection";
            _typeNameTable[57] = "smartchUWP.View.Membres.AddMembre";
            _typeNameTable[58] = "smartchUWP.View.Membres.Membres";
            _typeNameTable[59] = "smartchUWP.View.Register";
            _typeNameTable[60] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[61] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[62] = "System.Windows.Input.ICommand";
            _typeNameTable[63] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[64] = "smartchUWP.View.MainPage";
            _typeNameTable[65] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[66] = "smartchUWP.View.Tournaments.AddMatch";
            _typeNameTable[67] = "smartchUWP.View.Tournaments.AddTournament";
            _typeNameTable[68] = "smartchUWP.View.Tournaments.Matchs";
            _typeNameTable[69] = "smartchUWP.View.Tournaments.Tournaments";
            _typeNameTable[70] = "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool";
            _typeNameTable[71] = "Windows.UI.Xaml.Markup.MarkupExtension";

            _typeTable = new global::System.Type[72];
            _typeTable[0] = typeof(global::smartchUWP.Converters.DateTimeConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::smartchUWP.Converters.DateTimeToAgeConverter);
            _typeTable[3] = typeof(global::smartchUWP.Converters.DateTimeToDateTimeOffsetConverter);
            _typeTable[4] = typeof(global::smartchUWP.Converters.BooleanToVisibilityConverter);
            _typeTable[5] = typeof(global::smartchUWP.Converters.BooleanToIsVisibleBorderThikness);
            _typeTable[6] = typeof(global::smartchUWP.Converters.StateToStringConverter);
            _typeTable[7] = typeof(global::smartchUWP.ViewModel.ViewModelLocator);
            _typeTable[8] = typeof(global::smartchUWP.ViewModel.MainPageViewModel);
            _typeTable[9] = typeof(global::smartchUWP.ViewModel.SmartchViewModelBase);
            _typeTable[10] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[11] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[12] = typeof(global::smartchUWP.ViewModel.ClubsViewModel);
            _typeTable[13] = typeof(global::smartchUWP.ViewModel.AddMembreViewModel);
            _typeTable[14] = typeof(global::smartchUWP.ViewModel.MembresModelView);
            _typeTable[15] = typeof(global::smartchUWP.ViewModel.TournamentViewModel);
            _typeTable[16] = typeof(global::smartchUWP.ViewModel.AddTournamentViewModel);
            _typeTable[17] = typeof(global::smartchUWP.ViewModel.AddClubViewModel);
            _typeTable[18] = typeof(global::smartchUWP.ViewModel.LoginViewModel);
            _typeTable[19] = typeof(global::smartchUWP.ViewModel.AddMatchViewModel);
            _typeTable[20] = typeof(global::smartchUWP.ViewModel.MatchsViewModel);
            _typeTable[21] = typeof(global::smartchUWP.ViewModel.RegisterViewModel);
            _typeTable[22] = typeof(global::smartchUWP.View.AdresseForm);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[25] = typeof(global::smartchUWP.View.Clubs.AddClub);
            _typeTable[26] = typeof(global::smartchUWP.View.Clubs.Clubs);
            _typeTable[27] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[28] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[31] = typeof(global::XamlAnimatedGif.AnimationBehavior);
            _typeTable[32] = typeof(global::System.Uri);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.Image);
            _typeTable[34] = typeof(global::System.IO.Stream);
            _typeTable[35] = typeof(global::System.MarshalByRefObject);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Media.Animation.RepeatBehavior);
            _typeTable[37] = typeof(global::System.Boolean);
            _typeTable[38] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade);
            _typeTable[39] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>);
            _typeTable[40] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase<global::Windows.UI.Xaml.UIElement>);
            _typeTable[41] = typeof(global::Microsoft.Xaml.Interactivity.Behavior<global::Windows.UI.Xaml.UIElement>);
            _typeTable[42] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[43] = typeof(global::System.Double);
            _typeTable[44] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType);
            _typeTable[45] = typeof(global::System.Enum);
            _typeTable[46] = typeof(global::System.ValueType);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.Media.Animation.EasingMode);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[49] = typeof(global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior);
            _typeTable[50] = typeof(global::Microsoft.Xaml.Interactivity.Trigger);
            _typeTable[51] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[52] = typeof(global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType);
            _typeTable[53] = typeof(global::Microsoft.Xaml.Interactions.Core.CallMethodAction);
            _typeTable[54] = typeof(global::System.String);
            _typeTable[55] = typeof(global::smartchUWP.View.Login);
            _typeTable[56] = typeof(global::smartchUWP.View.MemberSelection);
            _typeTable[57] = typeof(global::smartchUWP.View.Membres.AddMembre);
            _typeTable[58] = typeof(global::smartchUWP.View.Membres.Membres);
            _typeTable[59] = typeof(global::smartchUWP.View.Register);
            _typeTable[60] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[61] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[62] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[63] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[64] = typeof(global::smartchUWP.View.MainPage);
            _typeTable[65] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[66] = typeof(global::smartchUWP.View.Tournaments.AddMatch);
            _typeTable[67] = typeof(global::smartchUWP.View.Tournaments.AddTournament);
            _typeTable[68] = typeof(global::smartchUWP.View.Tournaments.Matchs);
            _typeTable[69] = typeof(global::smartchUWP.View.Tournaments.Tournaments);
            _typeTable[70] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool);
            _typeTable[71] = typeof(global::Windows.UI.Xaml.Markup.MarkupExtension);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_DateTimeConverter() { return new global::smartchUWP.Converters.DateTimeConverter(); }
        private object Activate_2_DateTimeToAgeConverter() { return new global::smartchUWP.Converters.DateTimeToAgeConverter(); }
        private object Activate_3_DateTimeToDateTimeOffsetConverter() { return new global::smartchUWP.Converters.DateTimeToDateTimeOffsetConverter(); }
        private object Activate_4_BooleanToVisibilityConverter() { return new global::smartchUWP.Converters.BooleanToVisibilityConverter(); }
        private object Activate_5_BooleanToIsVisibleBorderThikness() { return new global::smartchUWP.Converters.BooleanToIsVisibleBorderThikness(); }
        private object Activate_6_StateToStringConverter() { return new global::smartchUWP.Converters.StateToStringConverter(); }
        private object Activate_7_ViewModelLocator() { return new global::smartchUWP.ViewModel.ViewModelLocator(); }
        private object Activate_11_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_22_AdresseForm() { return new global::smartchUWP.View.AdresseForm(); }
        private object Activate_25_AddClub() { return new global::smartchUWP.View.Clubs.AddClub(); }
        private object Activate_26_Clubs() { return new global::smartchUWP.View.Clubs.Clubs(); }
        private object Activate_28_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_38_Fade() { return new global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade(); }
        private object Activate_49_DataTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior(); }
        private object Activate_51_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_53_CallMethodAction() { return new global::Microsoft.Xaml.Interactions.Core.CallMethodAction(); }
        private object Activate_55_Login() { return new global::smartchUWP.View.Login(); }
        private object Activate_56_MemberSelection() { return new global::smartchUWP.View.MemberSelection(); }
        private object Activate_57_AddMembre() { return new global::smartchUWP.View.Membres.AddMembre(); }
        private object Activate_58_Membres() { return new global::smartchUWP.View.Membres.Membres(); }
        private object Activate_59_Register() { return new global::smartchUWP.View.Register(); }
        private object Activate_60_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_61_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_64_MainPage() { return new global::smartchUWP.View.MainPage(); }
        private object Activate_66_AddMatch() { return new global::smartchUWP.View.Tournaments.AddMatch(); }
        private object Activate_67_AddTournament() { return new global::smartchUWP.View.Tournaments.AddTournament(); }
        private object Activate_68_Matchs() { return new global::smartchUWP.View.Tournaments.Matchs(); }
        private object Activate_69_Tournaments() { return new global::smartchUWP.View.Tournaments.Tournaments(); }
        private object Activate_70_NullableBool() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool(); }
        private void VectorAdd_28_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_51_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  smartchUWP.Converters.DateTimeConverter
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_DateTimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  smartchUWP.Converters.DateTimeToAgeConverter
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_DateTimeToAgeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  smartchUWP.Converters.DateTimeToDateTimeOffsetConverter
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_DateTimeToDateTimeOffsetConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  smartchUWP.Converters.BooleanToVisibilityConverter
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_BooleanToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  smartchUWP.Converters.BooleanToIsVisibleBorderThikness
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_BooleanToIsVisibleBorderThikness;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  smartchUWP.Converters.StateToStringConverter
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_StateToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  smartchUWP.ViewModel.ViewModelLocator
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_ViewModelLocator;
                userType.AddMemberName("MainPage");
                userType.AddMemberName("Clubs");
                userType.AddMemberName("AddMembre");
                userType.AddMemberName("Membres");
                userType.AddMemberName("Tournaments");
                userType.AddMemberName("AddTournament");
                userType.AddMemberName("AddClub");
                userType.AddMemberName("Login");
                userType.AddMemberName("AddMatch");
                userType.AddMemberName("Matchs");
                userType.AddMemberName("Register");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  smartchUWP.ViewModel.MainPageViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  smartchUWP.ViewModel.SmartchViewModelBase
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 11:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_ObservableObject;
                xamlType = userType;
                break;

            case 12:   //  smartchUWP.ViewModel.ClubsViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  smartchUWP.ViewModel.AddMembreViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  smartchUWP.ViewModel.MembresModelView
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  smartchUWP.ViewModel.TournamentViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  smartchUWP.ViewModel.AddTournamentViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  smartchUWP.ViewModel.AddClubViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  smartchUWP.ViewModel.LoginViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  smartchUWP.ViewModel.AddMatchViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  smartchUWP.ViewModel.MatchsViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  smartchUWP.ViewModel.RegisterViewModel
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("smartchUWP.ViewModel.SmartchViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  smartchUWP.View.AdresseForm
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_AdresseForm;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  smartchUWP.View.Clubs.AddClub
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_AddClub;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  smartchUWP.View.Clubs.Clubs
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_Clubs;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 28:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_28_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  XamlAnimatedGif.AnimationBehavior
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("SourceUri");
                userType.AddMemberName("SourceStream");
                userType.AddMemberName("RepeatBehavior");
                userType.AddMemberName("AutoStart");
                userType.AddMemberName("AnimateInDesignMode");
                xamlType = userType;
                break;

            case 32:   //  System.Uri
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Windows.UI.Xaml.Controls.Image
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  System.IO.Stream
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MarshalByRefObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  System.MarshalByRefObject
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Media.Animation.RepeatBehavior
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Boolean
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>"));
                userType.Activator = Activate_38_Fade;
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 39:   //  Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase`1<Windows.UI.Xaml.UIElement>"));
                userType.AddMemberName("Duration");
                userType.AddMemberName("AutomaticallyStart");
                userType.AddMemberName("Delay");
                userType.AddMemberName("EasingType");
                userType.AddMemberName("EasingMode");
                xamlType = userType;
                break;

            case 40:   //  Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase`1<Windows.UI.Xaml.UIElement>
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.UIElement>"));
                xamlType = userType;
                break;

            case 41:   //  Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.UIElement>
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 42:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 43:   //  Double
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Microsoft.Toolkit.Uwp.UI.Animations.EasingType
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);
                userType.AddEnumValue("Linear", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Linear);
                userType.AddEnumValue("Cubic", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Cubic);
                userType.AddEnumValue("Back", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Back);
                userType.AddEnumValue("Bounce", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Bounce);
                userType.AddEnumValue("Elastic", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Elastic);
                userType.AddEnumValue("Circle", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Circle);
                userType.AddEnumValue("Quadratic", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Quadratic);
                userType.AddEnumValue("Quartic", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Quartic);
                userType.AddEnumValue("Quintic", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Quintic);
                userType.AddEnumValue("Sine", global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Sine);
                xamlType = userType;
                break;

            case 45:   //  System.Enum
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 46:   //  System.ValueType
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.Media.Animation.EasingMode
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Microsoft.Xaml.Interactions.Core.DataTriggerBehavior
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger"));
                userType.Activator = Activate_49_DataTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("Binding");
                userType.AddMemberName("ComparisonCondition");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 50:   //  Microsoft.Xaml.Interactivity.Trigger
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("Actions");
                xamlType = userType;
                break;

            case 51:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_51_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  Microsoft.Xaml.Interactions.Core.ComparisonConditionType
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Equal", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.Equal);
                userType.AddEnumValue("NotEqual", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.NotEqual);
                userType.AddEnumValue("LessThan", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.LessThan);
                userType.AddEnumValue("LessThanOrEqual", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.LessThanOrEqual);
                userType.AddEnumValue("GreaterThan", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.GreaterThan);
                userType.AddEnumValue("GreaterThanOrEqual", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.GreaterThanOrEqual);
                xamlType = userType;
                break;

            case 53:   //  Microsoft.Xaml.Interactions.Core.CallMethodAction
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_53_CallMethodAction;
                userType.AddMemberName("MethodName");
                userType.AddMemberName("TargetObject");
                xamlType = userType;
                break;

            case 54:   //  String
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  smartchUWP.View.Login
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_Login;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  smartchUWP.View.MemberSelection
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_56_MemberSelection;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  smartchUWP.View.Membres.AddMembre
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_57_AddMembre;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  smartchUWP.View.Membres.Membres
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_58_Membres;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  smartchUWP.View.Register
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_Register;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger"));
                userType.Activator = Activate_60_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                xamlType = userType;
                break;

            case 61:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_61_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 62:   //  System.Windows.Input.ICommand
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 64:   //  smartchUWP.View.MainPage
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_64_MainPage;
                userType.AddMemberName("AppFrame");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 66:   //  smartchUWP.View.Tournaments.AddMatch
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_66_AddMatch;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  smartchUWP.View.Tournaments.AddTournament
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_67_AddTournament;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 68:   //  smartchUWP.View.Tournaments.Matchs
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_68_Matchs;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 69:   //  smartchUWP.View.Tournaments.Tournaments
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_69_Tournaments;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool
                userType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_70_NullableBool;
                userType.AddMemberName("Value");
                userType.AddMemberName("IsNull");
                userType.SetIsBindable();
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 71:   //  Windows.UI.Xaml.Markup.MarkupExtension
                xamlType = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Microsoft_Toolkit_Uwp_UI_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModelLocator_MainPage(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.MainPage;
        }
        private object get_1_ViewModelLocator_Clubs(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.Clubs;
        }
        private object get_2_ViewModelLocator_AddMembre(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.AddMembre;
        }
        private object get_3_ViewModelLocator_Membres(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.Membres;
        }
        private object get_4_ViewModelLocator_Tournaments(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.Tournaments;
        }
        private object get_5_ViewModelLocator_AddTournament(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.AddTournament;
        }
        private object get_6_ViewModelLocator_AddClub(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.AddClub;
        }
        private object get_7_ViewModelLocator_Login(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.Login;
        }
        private object get_8_ViewModelLocator_AddMatch(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.AddMatch;
        }
        private object get_9_ViewModelLocator_Matchs(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.Matchs;
        }
        private object get_10_ViewModelLocator_Register(object instance)
        {
            var that = (global::smartchUWP.ViewModel.ViewModelLocator)instance;
            return that.Register;
        }
        private object get_11_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_11_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_12_AnimationBehavior_SourceUri(object instance)
        {
            return global::XamlAnimatedGif.AnimationBehavior.GetSourceUri((global::Windows.UI.Xaml.Controls.Image)instance);
        }
        private void set_12_AnimationBehavior_SourceUri(object instance, object Value)
        {
            global::XamlAnimatedGif.AnimationBehavior.SetSourceUri((global::Windows.UI.Xaml.Controls.Image)instance, (global::System.Uri)Value);
        }
        private object get_13_AnimationBehavior_SourceStream(object instance)
        {
            return global::XamlAnimatedGif.AnimationBehavior.GetSourceStream((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_13_AnimationBehavior_SourceStream(object instance, object Value)
        {
            global::XamlAnimatedGif.AnimationBehavior.SetSourceStream((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.IO.Stream)Value);
        }
        private object get_14_AnimationBehavior_RepeatBehavior(object instance)
        {
            return global::XamlAnimatedGif.AnimationBehavior.GetRepeatBehavior((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_14_AnimationBehavior_RepeatBehavior(object instance, object Value)
        {
            global::XamlAnimatedGif.AnimationBehavior.SetRepeatBehavior((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Xaml.Media.Animation.RepeatBehavior)Value);
        }
        private object get_15_AnimationBehavior_AutoStart(object instance)
        {
            return global::XamlAnimatedGif.AnimationBehavior.GetAutoStart((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_15_AnimationBehavior_AutoStart(object instance, object Value)
        {
            global::XamlAnimatedGif.AnimationBehavior.SetAutoStart((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Boolean)Value);
        }
        private object get_16_AnimationBehavior_AnimateInDesignMode(object instance)
        {
            return global::XamlAnimatedGif.AnimationBehavior.GetAnimateInDesignMode((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_16_AnimationBehavior_AnimateInDesignMode(object instance, object Value)
        {
            global::XamlAnimatedGif.AnimationBehavior.SetAnimateInDesignMode((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Boolean)Value);
        }
        private object get_17_Fade_Value(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade)instance;
            return that.Value;
        }
        private void set_17_Fade_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_18_CompositionBehaviorBase_Duration(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            return that.Duration;
        }
        private void set_18_CompositionBehaviorBase_Duration(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            that.Duration = (global::System.Double)Value;
        }
        private object get_19_CompositionBehaviorBase_AutomaticallyStart(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            return that.AutomaticallyStart;
        }
        private void set_19_CompositionBehaviorBase_AutomaticallyStart(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            that.AutomaticallyStart = (global::System.Boolean)Value;
        }
        private object get_20_CompositionBehaviorBase_Delay(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            return that.Delay;
        }
        private void set_20_CompositionBehaviorBase_Delay(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            that.Delay = (global::System.Double)Value;
        }
        private object get_21_CompositionBehaviorBase_EasingType(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            return that.EasingType;
        }
        private void set_21_CompositionBehaviorBase_EasingType(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            that.EasingType = (global::Microsoft.Toolkit.Uwp.UI.Animations.EasingType)Value;
        }
        private object get_22_CompositionBehaviorBase_EasingMode(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            return that.EasingMode;
        }
        private void set_22_CompositionBehaviorBase_EasingMode(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.UIElement>)instance;
            that.EasingMode = (global::Windows.UI.Xaml.Media.Animation.EasingMode)Value;
        }
        private object get_23_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior<global::Windows.UI.Xaml.UIElement>)instance;
            return that.AssociatedObject;
        }
        private object get_24_Trigger_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Trigger)instance;
            return that.Actions;
        }
        private object get_25_DataTriggerBehavior_Binding(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            return that.Binding;
        }
        private void set_25_DataTriggerBehavior_Binding(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            that.Binding = (global::System.Object)Value;
        }
        private object get_26_DataTriggerBehavior_ComparisonCondition(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            return that.ComparisonCondition;
        }
        private void set_26_DataTriggerBehavior_ComparisonCondition(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            that.ComparisonCondition = (global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType)Value;
        }
        private object get_27_DataTriggerBehavior_Value(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            return that.Value;
        }
        private void set_27_DataTriggerBehavior_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_28_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior)instance;
            return that.AssociatedObject;
        }
        private object get_29_CallMethodAction_MethodName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            return that.MethodName;
        }
        private void set_29_CallMethodAction_MethodName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            that.MethodName = (global::System.String)Value;
        }
        private object get_30_CallMethodAction_TargetObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            return that.TargetObject;
        }
        private void set_30_CallMethodAction_TargetObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            that.TargetObject = (global::System.Object)Value;
        }
        private object get_31_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_31_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_32_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_32_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_33_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_33_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_34_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_34_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_35_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_35_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_36_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_36_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_37_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_37_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_38_MainPage_AppFrame(object instance)
        {
            var that = (global::smartchUWP.View.MainPage)instance;
            return that.AppFrame;
        }
        private object get_39_NullableBool_Value(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            return that.Value;
        }
        private void set_39_NullableBool_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            that.Value = (global::System.Boolean)Value;
        }
        private object get_40_NullableBool_IsNull(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            return that.IsNull;
        }
        private void set_40_NullableBool_IsNull(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            that.IsNull = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "smartchUWP.ViewModel.ViewModelLocator.MainPage":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "MainPage", "smartchUWP.ViewModel.MainPageViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_MainPage;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.Clubs":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Clubs", "smartchUWP.ViewModel.ClubsViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_Clubs;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.AddMembre":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AddMembre", "smartchUWP.ViewModel.AddMembreViewModel");
                xamlMember.Getter = get_2_ViewModelLocator_AddMembre;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.Membres":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Membres", "smartchUWP.ViewModel.MembresModelView");
                xamlMember.Getter = get_3_ViewModelLocator_Membres;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.Tournaments":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Tournaments", "smartchUWP.ViewModel.TournamentViewModel");
                xamlMember.Getter = get_4_ViewModelLocator_Tournaments;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.AddTournament":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AddTournament", "smartchUWP.ViewModel.AddTournamentViewModel");
                xamlMember.Getter = get_5_ViewModelLocator_AddTournament;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.AddClub":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AddClub", "smartchUWP.ViewModel.AddClubViewModel");
                xamlMember.Getter = get_6_ViewModelLocator_AddClub;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.Login":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Login", "smartchUWP.ViewModel.LoginViewModel");
                xamlMember.Getter = get_7_ViewModelLocator_Login;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.AddMatch":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AddMatch", "smartchUWP.ViewModel.AddMatchViewModel");
                xamlMember.Getter = get_8_ViewModelLocator_AddMatch;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.Matchs":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Matchs", "smartchUWP.ViewModel.MatchsViewModel");
                xamlMember.Getter = get_9_ViewModelLocator_Matchs;
                xamlMember.SetIsReadOnly();
                break;
            case "smartchUWP.ViewModel.ViewModelLocator.Register":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.ViewModel.ViewModelLocator");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Register", "smartchUWP.ViewModel.RegisterViewModel");
                xamlMember.Getter = get_10_ViewModelLocator_Register;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_11_Interaction_Behaviors;
                xamlMember.Setter = set_11_Interaction_Behaviors;
                break;
            case "XamlAnimatedGif.AnimationBehavior.SourceUri":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlAnimatedGif.AnimationBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "SourceUri", "System.Uri");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Controls.Image");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_12_AnimationBehavior_SourceUri;
                xamlMember.Setter = set_12_AnimationBehavior_SourceUri;
                break;
            case "XamlAnimatedGif.AnimationBehavior.SourceStream":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlAnimatedGif.AnimationBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "SourceStream", "System.IO.Stream");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_13_AnimationBehavior_SourceStream;
                xamlMember.Setter = set_13_AnimationBehavior_SourceStream;
                break;
            case "XamlAnimatedGif.AnimationBehavior.RepeatBehavior":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlAnimatedGif.AnimationBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "RepeatBehavior", "Windows.UI.Xaml.Media.Animation.RepeatBehavior");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_14_AnimationBehavior_RepeatBehavior;
                xamlMember.Setter = set_14_AnimationBehavior_RepeatBehavior;
                break;
            case "XamlAnimatedGif.AnimationBehavior.AutoStart":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlAnimatedGif.AnimationBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AutoStart", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_15_AnimationBehavior_AutoStart;
                xamlMember.Setter = set_15_AnimationBehavior_AutoStart;
                break;
            case "XamlAnimatedGif.AnimationBehavior.AnimateInDesignMode":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlAnimatedGif.AnimationBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AnimateInDesignMode", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_16_AnimationBehavior_AnimateInDesignMode;
                xamlMember.Setter = set_16_AnimationBehavior_AnimateInDesignMode;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade.Value":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Fade");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_Fade_Value;
                xamlMember.Setter = set_17_Fade_Value;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>.Duration":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Duration", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_CompositionBehaviorBase_Duration;
                xamlMember.Setter = set_18_CompositionBehaviorBase_Duration;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>.AutomaticallyStart":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AutomaticallyStart", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_CompositionBehaviorBase_AutomaticallyStart;
                xamlMember.Setter = set_19_CompositionBehaviorBase_AutomaticallyStart;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>.Delay":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Delay", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_CompositionBehaviorBase_Delay;
                xamlMember.Setter = set_20_CompositionBehaviorBase_Delay;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>.EasingType":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "EasingType", "Microsoft.Toolkit.Uwp.UI.Animations.EasingType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_CompositionBehaviorBase_EasingType;
                xamlMember.Setter = set_21_CompositionBehaviorBase_EasingType;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>.EasingMode":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.UIElement>");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "EasingMode", "Windows.UI.Xaml.Media.Animation.EasingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_CompositionBehaviorBase_EasingMode;
                xamlMember.Setter = set_22_CompositionBehaviorBase_EasingMode;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.UIElement>.AssociatedObject":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.UIElement>");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_23_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Trigger.Actions":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_Trigger_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior.Binding":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.DataTriggerBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Binding", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_DataTriggerBehavior_Binding;
                xamlMember.Setter = set_25_DataTriggerBehavior_Binding;
                break;
            case "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior.ComparisonCondition":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.DataTriggerBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "ComparisonCondition", "Microsoft.Xaml.Interactions.Core.ComparisonConditionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_DataTriggerBehavior_ComparisonCondition;
                xamlMember.Setter = set_26_DataTriggerBehavior_ComparisonCondition;
                break;
            case "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior.Value":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.DataTriggerBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_DataTriggerBehavior_Value;
                xamlMember.Setter = set_27_DataTriggerBehavior_Value;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior.AssociatedObject":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_28_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.CallMethodAction.MethodName":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.CallMethodAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "MethodName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_CallMethodAction_MethodName;
                xamlMember.Setter = set_29_CallMethodAction_MethodName;
                break;
            case "Microsoft.Xaml.Interactions.Core.CallMethodAction.TargetObject":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.CallMethodAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "TargetObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_CallMethodAction_TargetObject;
                xamlMember.Setter = set_30_CallMethodAction_TargetObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_31_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_32_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_InvokeCommandAction_Command;
                xamlMember.Setter = set_33_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_34_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_35_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_36_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_37_InvokeCommandAction_InputConverterLanguage;
                break;
            case "smartchUWP.View.MainPage.AppFrame":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("smartchUWP.View.MainPage");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "AppFrame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.Getter = get_38_MainPage_AppFrame;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool.Value":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "Value", "Boolean");
                xamlMember.Getter = get_39_NullableBool_Value;
                xamlMember.Setter = set_39_NullableBool_Value;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool.IsNull":
                userType = (global::smartchUWP.smartchUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool");
                xamlMember = new global::smartchUWP.smartchUWP_XamlTypeInfo.XamlMember(this, "IsNull", "Boolean");
                xamlMember.Getter = get_40_NullableBool_IsNull;
                xamlMember.Setter = set_40_NullableBool_IsNull;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::smartchUWP.smartchUWP_XamlTypeInfo.XamlSystemBaseType
    {
        global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::smartchUWP.smartchUWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

